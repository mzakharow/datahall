import streamlit as st
import pandas as pd
from datetime import datetime
from sqlalchemy import create_engine, text

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–∫—Ä—ã—Ç–∏–µ –ª–∏—à–Ω–µ–≥–æ
st.set_page_config(
    page_title="–û–ø—Ä–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
    page_icon="‚úÖ",
    layout="wide",
    initial_sidebar_state="expanded"
)

hide_streamlit_style = """
    <style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    </style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = st.secrets["database"]
engine = create_engine(
    f"postgresql+psycopg2://{db.user}:{db.password}@{db.host}:{db.port}/{db.dbname}"
)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
if "email_checked" not in st.session_state:
    st.session_state.email_checked = False
if "user_data" not in st.session_state:
    st.session_state.user_data = None

# ======================= –°—Ç—Ä–∞–Ω–∏—Ü—ã ==========================

def user_survey_page():
    st.title("üìç Work location")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ email –∏–∑ URL
    query_params = st.query_params
    uemail = query_params.get("email", 'Enter your email')
    email = st.text_input("Enter your email", value=uemail)

    # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ SELECT –∏–∑ –ë–î –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    row = {'task_options': 'DH,Super Core,Warehouse', 'client_options': '5,6,A,B'}

    if st.button("Check email"):
        if row:
            st.session_state.email_checked = True
            st.session_state.user_data = 1  # –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.session_state.email = email
            st.success("Email checked!")
        else:
            st.error("Email doesn't exist")

    if st.session_state.email_checked:
        tasks = row['task_options'].split(',')
        clients = row['client_options'].split(',')

        selected_task = st.selectbox("Choose location", tasks)
        selected_client = st.selectbox("Choose sublocation", clients)

        if st.button("Send"):
            response = {
                "email": email,
                "task": selected_task,
                "client": selected_client,
                "timestamp": datetime.now().isoformat()
            }

            st.success("Success!")
            st.json(response)

def locations_page():
    st.title("üóÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏—è–º–∏ (locations)")

    # –ó–∞–≥—Ä—É–∑–∏–º —Ç–µ–∫—É—â–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    with engine.connect() as conn:
        df = pd.read_sql("SELECT id, name FROM locations ORDER BY id", conn)

    st.subheader("üìã –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π")
    st.dataframe(df)

    # ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ
    st.subheader("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é")
    new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏")

    if st.button("–î–æ–±–∞–≤–∏—Ç—å"):
        if new_name:
            with engine.begin() as conn:
                conn.execute(text("INSERT INTO locations (name) VALUES (:name)"), {"name": new_name})
            st.success(f"–õ–æ–∫–∞—Ü–∏—è '{new_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            st.experimental_rerun()
        else:
            st.warning("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

    # ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–∫–∞—Ü–∏—é")
    loc_names = df.set_index("id")["name"].to_dict()
    selected_id = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é", options=loc_names.keys(), format_func=lambda x: loc_names[x])
    new_value = st.text_input("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ", value=loc_names[selected_id])

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
        with engine.begin() as conn:
            conn.execute(text("UPDATE locations SET name = :n WHERE id = :i"), {"n": new_value, "i": selected_id})
        st.success("–õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        st.experimental_rerun()

    # üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ
    st.subheader("–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")
    if st.button("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é"):
        with engine.begin() as conn:
            conn.execute(text("DELETE FROM locations WHERE id = :i"), {"i": selected_id})
        st.success("–õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
        st.experimental_rerun()

# ======================= –ù–∞–≤–∏–≥–∞—Ü–∏—è ==========================

st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio("–°—Ç—Ä–∞–Ω–∏—Ü—ã", ["–û–ø—Ä–æ—Å", "–õ–æ–∫–∞—Ü–∏–∏"])

if page == "–û–ø—Ä–æ—Å":
    user_survey_page()
elif page == "–õ–æ–∫–∞—Ü–∏–∏":
    locations_page()
